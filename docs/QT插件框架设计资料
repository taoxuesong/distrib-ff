
自己动手写插件框架（7）
https://www.devbean.net/2012/04/building-your-own-plugin-framework-7/

本章节将开始讨论如何开发跨平台的 C++ 插件。跨平台开发C/C++ 的跨平台开发相当复杂：数据类型不同，编译器不同，
操作系统 API 也不同。跨平台开发关键是封装平台差异性，让你的应用程序仅关注于业务逻辑。如果应用程序使用了与平台相关的代码，
我们就需要添加很多#ifdef OS_THIS或者#ifdef OS_THAT这样的宏。这是你必须注意的。解决跨平台问题的一个最佳实践是，
将平台相关代码分隔到不同的库中去。这么做的好处是，如果你需要支持全新的平台，你只需修改这个平台的支持库即可。
了解目标平台开发多平台系统，首先主要了解和注意平台之间的差异。如果你的目标平台分别是 32 位和 64 位系统，
那么就应当明白其中的限制。如果你的目标平台是 Windows，你需要了解 ANSI/MBCS 和 Unicode/Wide 字符串的区别。
如果你的目标平台是移植了操作系统的移动设备，你需要了解该系统的哪些子集可用。选择良好的跨平台库下一步，
你需要选择一个良好的跨平台库。选择有很多优秀的库。大多数关注于 UI。这里，我们为我们的插件框架选择了 
Apache Portable Runtime (APR)。APR 是 Apache 的 web 服务器，subversion 服务器以及其他项目的基础类库。
但是，或许 APR 并不适合你。尽管它有完善的文档，但是它的文档并不清晰；而且它不是一个著名的大型社区；也没有教程；
只有相对较少的项目使用。另外，这是一个 C 库，你或许不喜欢它的命名风格。但是，它易于移植并且健壮（至少它是
Apache 和 Subversion 的一部分），并且可以用于实现高性能系统。考虑编写一个包装类，实现自己的跨平台库（只封装需要的部分）。
这么做有很多好处：
